{"name":"Dyner53","tagline":"Dynamic DNS with AWS Route 53 ","body":"# Dynamic Route53 DNS Updater #\r\n\r\nThis is is a quick and dirty script to manage a domain name on Route 53.\r\nThe basic idea is to use the AWS Route 53 api to get the same functionality offered\r\nby Dynamic DNS.  This is still a work in progress, particularly the daemon option.\r\n\r\nThese examples assume you have configured your environment to use the boto library to accesss AWS,\r\nand your account is currently hosting a domain on Route 53. \r\n\r\nExamples:\r\n\r\n    dyner53.py --domain example.com --subdomain myhost  check\r\n\r\nThis will lookup (using Route53) the current IP address for myhost.example.com, and compare it \r\nwith the publicly visible IP address of the current host, and report what it finds.  No changes are \r\nmade.\r\n\r\n\r\n    dyner53.py --domain example.com --subdomain myhost  update\r\n\r\nThis will perform the same check as above, and update if needed.  This will create subdomain if it \r\ndoes not already existing.\r\n \r\n    dyner53.py --domain example.com --subdomain myhost  --ip 123.123.123.0 update\r\n\r\nUpdates the given subdomain (creating if necessary) to the given IP address.  Useful for testing or\r\nfor simple domain management. \r\n  \r\n    dyner53.py --domain example.com --subdomain myhost daemon\r\n\r\nEXPERIMENTAL mode that will run as a daemon (in the background) that will check current public IP every 10 minutes and update if needed. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}